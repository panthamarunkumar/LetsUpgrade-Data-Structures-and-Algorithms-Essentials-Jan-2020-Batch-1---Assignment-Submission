#include<iostream>
using namespace std;
struct node{
    int data;
    struct node *next;
};
struct node *head,*new_node,*temp;
void insert(int data,int pos)
{
    node* new_node= new node;
    new_node->data=data;
    new_node->next=NULL;
   // head=new_node;
    if(pos==1)
    {
        new_node->next=head;
        head=new_node;
        return;
    }
    temp=head;
    for(int i=0;i<pos-2;i++)
    {
        temp=temp->next;
    }
    new_node->next=temp->next;
    temp->next=new_node;
}
void display()
{
  
    temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main()
{
    head=NULL;
    insert(3,1);
    insert(1,2);
    insert(7,1);
    insert(2,4);
    insert(9,3);
    cout<<"LINKED LIST IS";
    display();
    return 0;
}
---------------------------------------------------------------------------
#include <iostream>
using namespace std;
struct Node {
   int data;
   struct Node *next;
};
struct Node* head = NULL;
void insert(int new_data) {
   struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
   new_node->data = new_data;
   new_node->next = head;
   head = new_node;
}
void display() {
   struct Node* ptr;
   ptr = head;
   while (ptr != NULL) {
      cout<< ptr->data <<" ";
      ptr = ptr->next;
   }
}
void delet(int n)
{
    struct Node* temp1= head;
    if(n==1)
    {
    head=temp1->next;
    free(temp1);
    return;
    }
int i;
for(i=0;i<n-2;i++)
temp1=temp1->next;
struct Node* temp2=temp1->next;
temp1->next=temp2->next;
free(temp2);
}
int main() {
   insert(3);
   insert(1);
   insert(7);
   insert(2);
   insert(9);
   cout<<"The linked list is: ";
   display();
   int n;
   cout<<"position/n";
   cin>>n;
   delet(n);
   display();
   return 0;
}
--------------------------------------------------------------------------------
 

Because left + right may overflow. Which then means you get a result that is less than left. Or far into the negative if you are using signed integers.

So instead they take the distance between left and right and add half of that to left. This is only a single extra operation to make the algorithm more robust.
-----------------------------------------------------
